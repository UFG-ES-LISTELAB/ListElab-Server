<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ListElab.Contrato</name>
    </assembly>
    <members>
        <member name="T:ListElab.Contrato.Autenticacao.BearerAuthenticationHandler">
            <summary>
            Define as regras para autenticação.
            </summary>
        </member>
        <member name="M:ListElab.Contrato.Autenticacao.BearerAuthenticationHandler.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{ListElab.Contrato.Autenticacao.BearerAuthenticationOptions},Microsoft.Extensions.Logging.ILoggerFactory,System.Text.Encodings.Web.UrlEncoder,Microsoft.AspNetCore.Authentication.ISystemClock)">
            <summary>
            Construtor da classe que define as regras para autenticação.
            </summary>
            <param name="options">Opções para autenticação.</param>
            <param name="logger">Arquivo de log para auteneticação.</param>
            <param name="encoder">Tipo de encode para arquivo.</param>
            <param name="clock">Tempo de autenticação.</param>
        </member>
        <member name="M:ListElab.Contrato.Autenticacao.BearerAuthenticationHandler.HandleAuthenticateAsync">
            <summary>
            Método para aplicar regras de autenticação.
            </summary>
            <returns>Se a autenticação aconteceu ou não.</returns>
        </member>
        <member name="T:ListElab.Contrato.Controllers.ControladorPadrao`3">
            <summary>
            Controller padrão.
            </summary>
            <typeparam name="TObjeto">Objeto a ser trafegado.</typeparam>
            <typeparam name="S">Serviço do conceito.</typeparam>
            <typeparam name="TDto">Dto a ser trafegado.</typeparam>
        </member>
        <member name="M:ListElab.Contrato.Controllers.ControladorPadrao`3.Servico">
            <summary>
            Retorna o serviço.
            </summary>
            <returns>A instância de serviço.</returns>
        </member>
        <member name="M:ListElab.Contrato.Controllers.ControladorPadrao`3.ConsulteLista">
            <summary>
            Lista todas os registros cadastrados.
            </summary>
            <returns>Retorna um objeto de sucesso ou falha e os registros cadastrados, caso sucesso.</returns>
        </member>
        <member name="M:ListElab.Contrato.Controllers.ControladorPadrao`3.ConsultePorId(System.String)">
            <summary>
            Consulta um registro passando o identificador único.
            </summary>
            <returns>Retorna um objeto de sucesso ou falha com o registro encontrado, caso sucesso.</returns>
        </member>
        <member name="M:ListElab.Contrato.Controllers.ControladorPadrao`3.Cadastre(`2)">
            <summary>
            Cadastra um registro novo no banco.
            </summary>
            <param name="objeto">O registro a ser cadastrado..</param>
            <returns>Retorna objeto com resultado da requisição.</returns>
        </member>
        <member name="M:ListElab.Contrato.Controllers.ControladorPadrao`3.Atualize(`2)">
            <summary>
            Atualiza um registro existente no banco.
            </summary>
            <param name="objeto">O registro com seus novos dados e o id para identificação.</param>
            <returns>Retorna objeto com resultado da requisição.</returns>
        </member>
        <member name="M:ListElab.Contrato.Controllers.ControladorPadrao`3.Delete(System.String)">
            <summary>
            Exclue um registro no banco.
            </summary>
            <param name="id">Id do registro que será excluído.</param>
            <returns>Retorna objeto com resultado da requisição.</returns>
        </member>
        <member name="M:ListElab.Contrato.Controllers.ControladorPadrao`3.ExecuteAcaoAutorizada(System.Func{Microsoft.AspNetCore.Mvc.ActionResult{ListElab.Dominio.Dtos.DtoResultado{`2}}})">
            <summary>
            Executa o método para a requisição da api e retorna o resultado da requisição.
            </summary>
            <param name="sucesso">Método quando a requisição aconteceu com sucesso.</param>
            <returns></returns>
        </member>
        <member name="M:ListElab.Contrato.Controllers.DisciplinaController.ConsulteLista">
            <summary>
            Lista todas os registros cadastrados.
            </summary>
            <returns>Retorna um objeto de sucesso ou falha e os registros cadastrados, caso sucesso.</returns>
        </member>
        <member name="M:ListElab.Contrato.Controllers.DisciplinaController.ExecuteAcaoAutorizada(System.Func{Microsoft.AspNetCore.Mvc.ActionResult{ListElab.Dominio.Dtos.DtoResultado{ListElab.Dominio.Conceitos.DisciplinaObj.Disciplina}}})">
            <summary>
            Executa o método para a requisição da api e retorna o resultado da requisição.
            </summary>
            <param name="sucesso">Método quando a requisição aconteceu com sucesso.</param>
            <returns></returns>
        </member>
        <member name="T:ListElab.Contrato.Controllers.ListaController">
            <summary>
            Api para Lista
            </summary>
        </member>
        <member name="M:ListElab.Contrato.Controllers.ListaController.ConsulteComFiltro(System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String[])">
            <summary>
            Filtro de lista. Funciona de forma cumulativa. Se eu escolher nivel de dificuldade 'Fácil' e Tempo Máximo de Resposta 10 minutos, então 
            o a api só retornar as listas que atendem aos dois filtros. Não é preciso preencher todos os filtros, somente àqueles que se deseja usar.
            </summary>
            <param name="nivelDificuldade">1 - 'Muito Fácil'; 2 - 'Fácil', 3 - 'Médio', 4 - 'Difícil', 5 - 'Muito Difícil'</param>
            <param name="disciplina">Deve-se passar o código da disciplina desejada. O filtro busca por listas que possuem questões dessa disciplina.</param>
            <param name="areaDeConhecimento">Deve-se passar o código da área de conhecimento desejada. O filtro busca por listas que possuem questões dessa área de conhecimento.</param>
            <param name="tempoEsperadoResposta">Tempo máximo de resposta da lista expresso em minutos.</param>
            <param name="usuario">Autor da lista.</param>
            <param name="id">O id da lista, caso precise só de uma.</param>
            <param name="tags">Busca as tags das questões e traz as listas que possuem questões com as tags passada.</param>
            <returns></returns>
        </member>
        <member name="T:ListElab.Contrato.Controllers.QuestaoDiscursivaController">
            <summary>
            Api para o conceito de questão discursiva.
            </summary>
        </member>
        <member name="M:ListElab.Contrato.Controllers.QuestaoDiscursivaController.ConsulteComFiltro(System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String[])">
            <summary>
            Filtro de questões. Funciona de forma cumulativa. Se eu escolher nivel de dificuldade 'Fácil' e Tempo Máximo de Resposta 10 minutos, então 
            o a api só retornar questões que atendem aos dois filtros. Não é preciso preencher todos os filtros, somente àqueles que se deseja usar.
            </summary>
            <param name="nivelDificuldade">1 - 'Muito Fácil'; 2 - 'Fácil', 3 - 'Médio', 4 - 'Difícil', 5 - 'Muito Difícil'</param>
            <param name="disciplina">Deve-se passar o código da disciplina desejada.</param>
            <param name="areaDeConhecimento">Deve-se passar o código da área de conhecimento desejada.</param>
            <param name="tipoQuestao">0 - 'Discursiva'; 1 - 'Objetiva'</param>
            <param name="tempoEsperadoResposta">Tempo máximo de resposta expresso em minutos.</param>
            <param name="usuario">Autor da questão.</param>
            <param name="id">O id da questão, caso precise só de uma.</param>
            <param name="tags">Uma lista de tags que o professor pode colocar para identificar uma questão ao cadastrá-la.</param>
            <returns></returns>
        </member>
        <member name="T:ListElab.Contrato.Controllers.UsuarioController">
            <summary>
            Api de usuário para efetuar login.
            </summary>
        </member>
        <member name="M:ListElab.Contrato.Controllers.UsuarioController.Cadastre(ListElab.Dominio.Conceitos.UsuarioObj.Login)">
            <summary>
            Realiza login.
            </summary>
            <param name="login">O usuário buscando autenticação.</param>
            <returns>Retorna objeto com resultado da requisição.</returns>
        </member>
    </members>
</doc>
